{"ast":null,"code":"// Some utility functions in js\nvar u = module.exports = {\n  array: {\n    // Returns a copy of the array with the value removed once\n    //\n    //     [1, 2, 3, 1].del 1 #=> [2, 3, 1]\n    //     [1, 2, 3].del 4    #=> [1, 2, 3]\n    del: function del(arr, val) {\n      var index = arr.indexOf(val);\n\n      if (index != -1) {\n        if (index == 0) {\n          return arr.slice(1);\n        } else {\n          return arr.slice(0, index).concat(arr.slice(index + 1));\n        }\n      } else {\n        return arr;\n      }\n    },\n    // Returns the first element of the array\n    //\n    //     [1, 2, 3].first() #=> 1\n    first: function first(arr) {\n      return arr[0];\n    },\n    // Returns the last element of the array\n    //\n    //     [1, 2, 3].last()  #=> 3\n    last: function last(arr) {\n      return arr[arr.length - 1];\n    }\n  },\n  string: {\n    // Returns a copy of str with all occurrences of pattern replaced with either replacement or the return value of a function.\n    // The pattern will typically be a Regexp; if it is a String then no regular expression metacharacters will be interpreted\n    // (that is /\\d/ will match a digit, but ‘\\d’ will match a backslash followed by a ‘d’).\n    //\n    // In the function form, the current match object is passed in as a parameter to the function, and variables such as\n    // $[1], $[2], $[3] (where $ is the match object) will be set appropriately. The value returned by the function will be\n    // substituted for the match on each call.\n    //\n    // The result inherits any tainting in the original string or any supplied replacement string.\n    //\n    //     \"hello\".gsub /[aeiou]/, '*'      #=> \"h*ll*\"\n    //     \"hello\".gsub /[aeiou]/, '<$1>'   #=> \"h<e>ll<o>\"\n    //     \"hello\".gsub /[aeiou]/, ($) {\n    //       \"<#{$[1]}>\"                    #=> \"h<e>ll<o>\"\n    //\n    gsub: function gsub(str, pattern, replacement) {\n      var i, match, matchCmpr, matchCmprPrev, replacementStr, result, self;\n      if (!(pattern != null && replacement != null)) return u.string.value(str);\n      result = '';\n      self = str;\n\n      while (self.length > 0) {\n        if (match = self.match(pattern)) {\n          result += self.slice(0, match.index);\n\n          if (typeof replacement === 'function') {\n            match[1] = match[1] || match[0];\n            result += replacement(match);\n          } else if (replacement.match(/\\$[1-9]/)) {\n            matchCmprPrev = match;\n            matchCmpr = u.array.del(match, void 0);\n\n            while (matchCmpr !== matchCmprPrev) {\n              matchCmprPrev = matchCmpr;\n              matchCmpr = u.array.del(matchCmpr, void 0);\n            }\n\n            match[1] = match[1] || match[0];\n            replacementStr = replacement;\n\n            for (i = 1; i <= 9; i++) {\n              if (matchCmpr[i]) {\n                replacementStr = u.string.gsub(replacementStr, new RegExp(\"\\\\\\$\" + i), matchCmpr[i]);\n              }\n            }\n\n            result += replacementStr;\n          } else {\n            result += replacement;\n          }\n\n          self = self.slice(match.index + match[0].length);\n        } else {\n          result += self;\n          self = '';\n        }\n      }\n\n      return result;\n    },\n    // Returns a copy of the String with the first letter being upper case\n    //\n    //     \"hello\".upcase #=> \"Hello\"\n    upcase: function upcase(str) {\n      var self = u.string.gsub(str, /_([a-z])/, function ($) {\n        return \"_\" + $[1].toUpperCase();\n      });\n      self = u.string.gsub(self, /\\/([a-z])/, function ($) {\n        return \"/\" + $[1].toUpperCase();\n      });\n      return self[0].toUpperCase() + self.substr(1);\n    },\n    // Returns a copy of capitalized string\n    //\n    //     \"employee salary\" #=> \"Employee Salary\"\n    capitalize: function capitalize(str, spaces) {\n      if (!str.length) {\n        return str;\n      }\n\n      var self = str.toLowerCase();\n\n      if (!spaces) {\n        self = u.string.gsub(self, /\\s([a-z])/, function ($) {\n          return \" \" + $[1].toUpperCase();\n        });\n      }\n\n      return self[0].toUpperCase() + self.substr(1);\n    },\n    // Returns a copy of the String with the first letter being lower case\n    //\n    //     \"HELLO\".downcase #=> \"hELLO\"\n    downcase: function downcase(str) {\n      var self = u.string.gsub(str, /_([A-Z])/, function ($) {\n        return \"_\" + $[1].toLowerCase();\n      });\n      self = u.string.gsub(self, /\\/([A-Z])/, function ($) {\n        return \"/\" + $[1].toLowerCase();\n      });\n      return self[0].toLowerCase() + self.substr(1);\n    },\n    // Returns a string value for the String object\n    //\n    //     \"hello\".value() #=> \"hello\"\n    value: function value(str) {\n      return str.substr(0);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}