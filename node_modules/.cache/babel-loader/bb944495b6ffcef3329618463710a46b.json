{"ast":null,"code":"import _classCallCheck from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _class,\n    _jsxFileName = \"/Users/zhoushixiong/zsx_work/FangAllOne/src/components/withMobx/ImageUploader.tsx\";\n\nimport React, { Component } from 'react'; // import { Input } from 'semantic-ui-react';\n\nimport Button from '@material-ui/core/Button';\nimport { observer } from 'mobx-react';\nvar cloudName = 'ddycd5xyn';\nvar unsignedUploadPreset = 'rq6jvg1m';\n\nvar ImageUploader = observer(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImageUploader, _Component);\n\n  function ImageUploader(props) {\n    var _this;\n\n    _classCallCheck(this, ImageUploader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImageUploader).call(this, props));\n\n    _this.uploadFile = function (file) {\n      var url = \"https://api.cloudinary.com/v1_1/\".concat(cloudName, \"/upload\");\n      var xhr = new XMLHttpRequest();\n      var fd = new FormData();\n      xhr.open('POST', url, true);\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); // Reset the upload progress bar\n      //  document.getElementById('progress').style.width = 0;\n      // Update progress (can be used to show progress indicator)\n\n      xhr.upload.addEventListener(\"progress\", function (e) {\n        var progress = Math.round(e.loaded * 100.0 / e.total);\n        console.log(progress); //   document.getElementById('progress').style.width = progress + \"%\";\n\n        console.log(\"fileuploadprogress data.loaded: \".concat(e.loaded, \",\\n        data.total: \").concat(e.total));\n      });\n\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n          // File uploaded successfully\n          var response = JSON.parse(xhr.responseText); // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n\n          var url = response.secure_url; // Create a thumbnail of the uploaded image, with 150px width\n\n          var tokens = url.split('/');\n          tokens.splice(-2, 0, 'w_150,c_scale');\n          var img = new Image(); // HTML5 Constructor\n\n          img.src = tokens.join('/');\n          console.log(img.src);\n          var images = _this.state.img;\n          images.push(img.src);\n          console.log(_this.state.img);\n\n          _this.setState({\n            img: images\n          });\n        }\n      };\n\n      fd.append('upload_preset', unsignedUploadPreset);\n      fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n\n      fd.append('file', file);\n      xhr.send(fd);\n    };\n\n    _this.handleUpload = function () {\n      var store = _this.props.store;\n      console.log(store.name);\n      store.checkImg(_this.state.img);\n      store.upload();\n    };\n\n    _this.handleFiles = function (e) {\n      var files = e.target.files;\n      console.log(files);\n\n      for (var i = 0; i < files.length; i++) {\n        _this.uploadFile(files[i]); // call the function to upload the file\n\n      }\n    };\n\n    _this.getpropsimg = function () {\n      var store = _this.props.store;\n      console.log(store.img);\n    };\n\n    _this.state = {\n      img: []\n    };\n    return _this;\n  }\n\n  _createClass(ImageUploader, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      console.log(this.props.store.img);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.log('================');\n      console.log(this.props.store.img);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var image = this.state.img;\n      var images = [];\n      console.log(image);\n\n      for (var i = 0; i < image.length; i++) {\n        images.push(React.createElement(\"img\", {\n          src: image[i],\n          key: i,\n          width: 150,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        id: \"dropbox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, images), React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        multiple: true,\n        accept: \"image/*\",\n        onChange: this.handleFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }))), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.getpropsimg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"\\u53D6\\u6D88\"), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: this.handleUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"\\u4E0A\\u4F20\"));\n    }\n  }]);\n\n  return ImageUploader;\n}(Component)) || _class;\n\nexport { ImageUploader as default };","map":{"version":3,"sources":["/Users/zhoushixiong/zsx_work/FangAllOne/src/components/withMobx/ImageUploader.tsx"],"names":["React","Component","Button","observer","cloudName","unsignedUploadPreset","ImageUploader","props","uploadFile","file","url","xhr","XMLHttpRequest","fd","FormData","open","setRequestHeader","upload","addEventListener","e","progress","Math","round","loaded","total","console","log","onreadystatechange","readyState","status","response","JSON","parse","responseText","secure_url","tokens","split","splice","img","Image","src","join","images","state","push","setState","append","send","handleUpload","store","name","checkImg","handleFiles","files","target","i","length","getpropsimg","image"],"mappings":"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","sourcesContent":["import React,{ Component } from 'react';\n// import { Input } from 'semantic-ui-react';\nimport Button from '@material-ui/core/Button';\nimport { observer, inject } from 'mobx-react';\n\nconst cloudName = 'ddycd5xyn';\nconst unsignedUploadPreset = 'rq6jvg1m';\n\ninterface IImageUploaderProps{\n    store: any,\n}\ninterface IImageUploaderState{\n    img: any,\n}\n\n@observer\nexport default class ImageUploader extends Component<IImageUploaderProps, IImageUploaderState>{\n    constructor(props:any){\n        super(props);\n        this.state = {\n            img: []\n        }\n    }\n\n    componentWillMount(){\n      console.log(this.props.store.img);\n      \n    }\n    componentDidMount(){\n      console.log('================');\n      \n      console.log(this.props.store.img);\n    }\n    uploadFile = (file:any) => {\n        var url = `https://api.cloudinary.com/v1_1/${cloudName}/upload`;\n        var xhr = new XMLHttpRequest();\n        var fd = new FormData();\n        xhr.open('POST', url, true);\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      \n        // Reset the upload progress bar\n        //  document.getElementById('progress').style.width = 0;\n        \n        // Update progress (can be used to show progress indicator)\n        xhr.upload.addEventListener(\"progress\", function(e) {\n          var progress = Math.round((e.loaded * 100.0) / e.total);\n          console.log(progress);\n          \n        //   document.getElementById('progress').style.width = progress + \"%\";\n      \n          console.log(`fileuploadprogress data.loaded: ${e.loaded},\n        data.total: ${e.total}`);\n        });\n      \n        xhr.onreadystatechange = (e) => {\n          if (xhr.readyState == 4 && xhr.status == 200) {\n            // File uploaded successfully\n            var response = JSON.parse(xhr.responseText);\n            // https://res.cloudinary.com/cloudName/image/upload/v1483481128/public_id.jpg\n            var url = response.secure_url;\n            // Create a thumbnail of the uploaded image, with 150px width\n            var tokens = url.split('/');\n            tokens.splice(-2, 0, 'w_150,c_scale');\n            var img = new Image(); // HTML5 Constructor\n            img.src = tokens.join('/');\n            console.log(img.src);\n            let images = this.state.img;\n            images.push(img.src)\n            console.log(this.state.img);\n            \n            this.setState({\n                img: images,\n            })\n           \n          }\n        };\n      \n        fd.append('upload_preset', unsignedUploadPreset);\n        fd.append('tags', 'browser_upload'); // Optional - add tag for image admin in Cloudinary\n        fd.append('file', file);\n        xhr.send(fd);\n      }\n      handleUpload= () => {\n        const {store} = this.props;\n        console.log(store.name);\n        store.checkImg(this.state.img)\n        store.upload()\n\n          \n      }\n    handleFiles = (e:any) => {\n        \n        const files = e.target.files;\n        console.log(files);\n        \n        for (var i = 0; i < files.length; i++) {\n          this.uploadFile(files[i]); // call the function to upload the file\n        }\n    }\n    getpropsimg= () => {\n      const {store} = this.props;\n      console.log(store.img);\n     \n\n        \n    }\n    render(){\n        let image=this.state.img\n        let images=[]\n        console.log(image)\n        for(let i =0;i<image.length;i++){\n            images.push(<img src={image[i]}   key={i}  width={150} />)\n        }\n        return(\n            <div id=\"dropbox\">\n            <div>\n                    {images}\n                </div>\n            <form>\n                \n            <div>\n            <input type=\"file\" multiple={true} accept=\"image/*\" onChange={this.handleFiles} />\n            </div>\n            </form>\n            <Button variant=\"contained\" color=\"secondary\" onClick={this.getpropsimg}>\n                    取消\n                </Button>   \n                <Button variant=\"contained\" color=\"primary\" onClick={this.handleUpload}>\n                    上传\n                </Button>\n                  \n                    \n            </div>\n        )\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}