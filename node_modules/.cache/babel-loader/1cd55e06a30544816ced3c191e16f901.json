{"ast":null,"code":"import { LIST, UNKNOWN_METHOD, SHOW, CREATE, CREATE_MANY, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY, DESTROY, DESTROY_MANY, AUTH, REGISTER, SHOW_ID, SHOW_UNIQUE, CHECK_AUTH, GET_SMS } from './constants/API';\nimport config from './config';\nimport axios from 'axios';\nvar token = window.localStorage.getItem('fang_token');\nexport function auth(method, condition) {\n  console.log(method);\n\n  switch (method) {\n    case AUTH:\n      return axios.post(\"\".concat(config.basicUri, \"/auth\"), condition);\n\n    case CHECK_AUTH:\n      return axios.get(\"\".concat(config.basicUri, \"/auth?token=\").concat(condition));\n\n    case REGISTER:\n      return axios.post(\"\".concat(config.basicUri, \"/register\"), condition);\n\n    case GET_SMS:\n      return axios.post(\"\".concat(config.basicUri, \"/getsms\"), condition);\n\n    default:\n      return new Promise(function (res, rej) {\n        return res(UNKNOWN_METHOD);\n      });\n  }\n}\nexport function api() {\n  var sourceName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"users\";\n  var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : LIST;\n  var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var optional = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  var inflect = require('i')();\n\n  var singleSource = inflect.singularize(sourceName); //资源名单复数转换\n\n  console.log(method);\n  console.log(singleSource);\n  console.log(sourceName);\n  console.log(condition);\n  console.log(config);\n  console.log(optional);\n\n  switch (method) {\n    case LIST:\n      return axios.get(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        params: {\n          condition: condition,\n          optional: optional\n        }\n      });\n\n    case SHOW:\n      return axios.get(\"\".concat(config.basicUri, \"/\").concat(singleSource), {\n        params: {\n          condition: condition,\n          optional: optional\n        }\n      });\n\n    case SHOW_ID:\n      return axios.get(\"\".concat(config.basicUri, \"/\").concat(sourceName, \"/\").concat(condition.id, \"?token=\").concat(token), {\n        params: {\n          optional: optional\n        }\n      });\n\n    case SHOW_UNIQUE:\n      return axios.get(\"\".concat(config.basicUri, \"/\").concat(singleSource, \"/\").concat(condition.key));\n\n    case CREATE:\n      return axios.post(\"\".concat(config.basicUri, \"/\").concat(singleSource), {\n        condition: condition,\n        optional: optional\n      });\n\n    case CREATE_MANY:\n      return axios.post(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        condition: condition,\n        optional: optional\n      });\n\n    case UPDATE:\n      return axios.patch(\"\".concat(config.basicUri, \"/\").concat(singleSource), {\n        condition: condition,\n        optional: optional\n      });\n\n    case UPDATE_MANY:\n      return axios.put(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        condition: condition,\n        optional: optional\n      });\n\n    case DELETE:\n      return axios.patch(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        condition: condition,\n        optional: optional\n      });\n\n    case DELETE_MANY:\n      return axios.put(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        condition: condition,\n        optional: optional\n      });\n\n    case DESTROY:\n      return axios.delete(\"\".concat(config.basicUri, \"/\").concat(singleSource), {\n        params: {\n          condition: condition,\n          optional: optional\n        }\n      });\n\n    case DESTROY_MANY:\n      return axios.delete(\"\".concat(config.basicUri, \"/\").concat(sourceName), {\n        params: {\n          condition: condition,\n          optional: optional\n        }\n      });\n\n    default:\n      return new Promise(function (res, rej) {\n        return res(UNKNOWN_METHOD);\n      });\n  }\n}","map":{"version":3,"sources":["/Users/zhoushixiong/zsx_work/FangAllOne/src/api.ts"],"names":["LIST","UNKNOWN_METHOD","SHOW","CREATE","CREATE_MANY","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","DESTROY","DESTROY_MANY","AUTH","REGISTER","SHOW_ID","SHOW_UNIQUE","CHECK_AUTH","GET_SMS","config","axios","token","window","localStorage","getItem","auth","method","condition","console","log","post","basicUri","get","Promise","res","rej","api","sourceName","optional","inflect","require","singleSource","singularize","params","id","key","patch","put","delete"],"mappings":"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","sourcesContent":["import { LIST,\n     UNKNOWN_METHOD,\n      SHOW, \n      CREATE, \n      CREATE_MANY, \n      UPDATE, UPDATE_MANY,\n       DELETE, DELETE_MANY, DESTROY, DESTROY_MANY, AUTH, REGISTER, SHOW_ID, SHOW_UNIQUE,\n        CHECK_AUTH, \n        GET_SMS} \nfrom './constants/API';\nimport config from './config';\nimport axios from 'axios';\n\n\nconst token = window.localStorage.getItem('fang_token');\n\nexport  function auth(method:string, condition:any){\n    console.log(method);\n    \n    switch(method){\n        case AUTH:\n            return axios.post(`${config.basicUri}/auth`, \n                    condition,\n            );\n\n        case CHECK_AUTH:\n            return axios.get(`${config.basicUri}/auth?token=${condition}`);\n        \n        case REGISTER:\n            return axios.post(`${config.basicUri}/register`, \n                    condition,\n            );\n        case GET_SMS: \n            return axios.post(`${config.basicUri}/getsms`,\n                condition\n            );\n        default:\n            return new Promise((res: any, rej:any)=> res(UNKNOWN_METHOD));  \n    }\n}\n\n\nexport  function api(sourceName:string=\"users\", method:string=LIST, condition:any={}, optional:any={}){\n    const inflect = require('i')();\n    const singleSource = inflect.singularize(sourceName); //资源名单复数转换\n\n    console.log(method);\n    console.log(singleSource);\n    console.log(sourceName);\n    console.log(condition);\n    console.log(config);\n    console.log(optional);\n\n    switch (method) {\n        case LIST:\n            return axios.get(`${config.basicUri}/${sourceName}`, {\n                    params: {\n                        condition,\n                        optional,\n                    }\n            });\n        case SHOW:\n            return axios.get(`${config.basicUri}/${singleSource}`, {\n                    params: {\n                        condition,\n                         optional,\n                    }\n\n            });\n        case SHOW_ID:\n            return axios.get(`${config.basicUri}/${sourceName}/${condition.id}?token=${token}`,{\n                    params: {\n                        optional\n                    },\n            });\n\n        case SHOW_UNIQUE:\n\n            return axios.get(`${config.basicUri}/${singleSource}/${condition.key}`);\n\n        case CREATE:\n            return axios.post(`${config.basicUri}/${singleSource}`, {\n                    condition,\n                    optional,\n\n            });\n\n        case CREATE_MANY:\n            return axios.post(`${config.basicUri}/${sourceName}`, {\n                    condition,\n                    optional,\n            });\n        case UPDATE:\n           \n            return axios.patch(`${config.basicUri}/${singleSource}`, {\n                    condition,\n                    optional,\n            });\n        case UPDATE_MANY:\n            return axios.put(`${config.basicUri}/${sourceName}`, {\n                    condition,\n                    optional,\n\n            });\n        case DELETE:\n            return axios.patch(`${config.basicUri}/${sourceName}`, {\n                    condition,\n                    optional,\n            });\n        case DELETE_MANY:\n            return axios.put(`${config.basicUri}/${sourceName}`, {\n                    condition,\n                    optional,\n            });\n        case DESTROY:\n            return axios.delete(`${config.basicUri}/${singleSource}`, {\n                params: {\n                    condition,\n                    optional,\n                }\n            });\n        case DESTROY_MANY:\n            return axios.delete(`${config.basicUri}/${sourceName}`, {\n\n                params: {\n                    condition,\n                    optional,\n                }\n                    \n            });\n    \n        default:\n            return new Promise((res: any, rej:any)=> res(UNKNOWN_METHOD));\n    }\n\n}"]},"metadata":{},"sourceType":"module"}