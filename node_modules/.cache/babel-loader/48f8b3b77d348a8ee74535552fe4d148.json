{"ast":null,"code":"import _initializerDefineProperty from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;\n\nimport { SHOW_UNIQUE, REGISTER } from './../../constants/API';\nimport { observable, computed, action } from \"mobx\";\nimport { api, auth } from \"../../api\";\nimport currentUser from '../global/UserSession';\nexport var RegisterFormStore = (_class =\n/*#__PURE__*/\nfunction () {\n  function RegisterFormStore() {\n    _classCallCheck(this, RegisterFormStore);\n\n    _initializerDefineProperty(this, \"validMsg\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"username\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"usernameExist\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"checkingUsernameExist\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"usernamePassed\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"password\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"passwordPassed\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"passwordRepeat\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"startInput\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"registering\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"isSuccess\", _descriptor11, this);\n  }\n\n  _createClass(RegisterFormStore, [{\n    key: \"reset\",\n    value: function reset() {\n      this.validMsg = {\n        username: '',\n        password: '',\n        passwordRepeat: ''\n      };\n      this.passwordRepeat = \"\";\n      this.username = \"\";\n      this.passwordPassed = false;\n      this.registering = false;\n      this.isSuccess = false;\n      this.startInput = false;\n    }\n  }, {\n    key: \"checkUsernameExist\",\n    value: function checkUsernameExist() {\n      var _this = this;\n\n      this.checkingUsernameExist = true;\n      this.validMsg.username = \"正在检查用户名是否可用\";\n      console.log('走了这检查用户名1');\n      api('users', SHOW_UNIQUE, {\n        key: this.username\n      }).then(function (rlt) {\n        if (rlt.status === 204) {\n          _this.usernameExist = false;\n          _this.checkingUsernameExist = false;\n        }\n\n        if (rlt.data.username === _this.username) {\n          _this.usernameExist = true;\n          _this.validMsg.username = \"用户名被占用\";\n          _this.checkingUsernameExist = false;\n          _this.usernamePassed = false;\n        } else {\n          _this.validMsg.username = \"恭喜用户名可用\";\n          _this.usernamePassed = true;\n        }\n      });\n    }\n  }, {\n    key: \"changeUsername\",\n    value: function changeUsername(value) {\n      this.startInput = true;\n      this.username = value;\n      console.log(value);\n\n      if (!this.validUsername && this.username !== '') {\n        this.validMsg.username = \"用户名规则，4到16位（字母，数字，下划线，减号）\";\n      }\n\n      if (this.username !== '' && this.validUsername) {\n        this.validMsg.username = \"正在检查用户名是否可用\";\n        this.checkUsernameExist();\n      }\n    }\n  }, {\n    key: \"changePassword\",\n    value: function changePassword(value) {\n      this.startInput = true;\n      this.password = value;\n\n      if (!this.validPassword && this.password !== '') {\n        return this.validMsg.password = \"密码６-16位，（字母，数字，下划线，减号）\";\n      }\n\n      if (this.password === '') {\n        return this.validMsg.password = \"请输入密码\";\n      }\n\n      this.passwordPassed = true;\n      return this.validMsg.password = \"密码合格通过\";\n    }\n  }, {\n    key: \"changePasswordRepeat\",\n    value: function changePasswordRepeat(value) {\n      this.startInput = true;\n      return this.passwordRepeat = value;\n    }\n  }, {\n    key: \"register\",\n    value: function register() {\n      var _this2 = this;\n\n      this.registering = true;\n      auth(REGISTER, {\n        username: this.username,\n        password: this.password\n      }).then(function (rlt) {\n        if (rlt.data.username === _this2.username) {\n          currentUser.setUsername(rlt.data.username);\n          window.localStorage.setItem('fang_token', rlt.data.token);\n          window.localStorage.setItem('fang_userId', rlt.data.id);\n          _this2.isSuccess = true;\n        } else {\n          _this2.isSuccess = false;\n        }\n      });\n    }\n  }, {\n    key: \"validUsername\",\n    get: function get() {\n      //用户名正则，4到16位（字母，数字，下划线，减号）\n      var uPattern = /^[a-zA-Z0-9_-]{4,16}$/;\n      var matchRlt = uPattern.test(this.username);\n      return matchRlt;\n    }\n  }, {\n    key: \"validPassword\",\n    get: function get() {\n      // 最短6位，最长16位 {6,16}\n      // 可以包含小写大母 [a-z] 和大写字母 [A-Z]\n      // 可以包含数字 [0-9]\n      // 可以包含下划线 [ _ ] 和减号 [ - ]\n      var pPattern = /^[\\w_-]{6,16}$/;\n      return pPattern.test(this.password);\n    }\n  }, {\n    key: \"passwordRepeatPassed\",\n    get: function get() {\n      return this.password === this.passwordRepeat;\n    }\n  }, {\n    key: \"allPassed\",\n    get: function get() {\n      return this.usernamePassed && this.passwordPassed && this.passwordRepeatPassed;\n    }\n  }]);\n\n  return RegisterFormStore;\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"validMsg\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return {\n      username: '',\n      password: '',\n      passwordRepeat: ''\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"username\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"usernameExist\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"checkingUsernameExist\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"usernamePassed\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"password\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"passwordPassed\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"passwordRepeat\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return '';\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"startInput\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"registering\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"isSuccess\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"validUsername\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"validUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"validPassword\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"validPassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"passwordRepeatPassed\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"passwordRepeatPassed\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"allPassed\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"allPassed\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"reset\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"reset\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"checkUsernameExist\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"checkUsernameExist\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"changeUsername\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"changeUsername\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"changePassword\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"changePassword\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"changePasswordRepeat\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"changePasswordRepeat\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"register\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"register\"), _class.prototype)), _class);\nvar registerFormStore = new RegisterFormStore();\nexport default registerFormStore;","map":{"version":3,"sources":["/Users/zhoushixiong/zsx_work/FangAllOne/src/mobx/components/RegisterFormStore.ts"],"names":["SHOW_UNIQUE","REGISTER","observable","computed","action","api","auth","currentUser","RegisterFormStore","validMsg","username","password","passwordRepeat","passwordPassed","registering","isSuccess","startInput","checkingUsernameExist","console","log","key","then","rlt","status","usernameExist","data","usernamePassed","value","validUsername","checkUsernameExist","validPassword","setUsername","window","localStorage","setItem","token","id","uPattern","matchRlt","test","pPattern","passwordRepeatPassed","registerFormStore"],"mappings":"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","sourcesContent":["import { SHOW_UNIQUE, REGISTER } from './../../constants/API';\nimport { observable, computed, action } from \"mobx\";\nimport { api, auth } from \"../../api\";\nimport currentUser from '../global/UserSession';\n\nexport class RegisterFormStore {\n\n\n    @observable validMsg = {\n        username: '',\n        password: '',\n        passwordRepeat: ''\n    }\n\n    @observable username = '';\n    @observable usernameExist = false;\n    @observable checkingUsernameExist = false;\n    @observable usernamePassed = false;\n\n \n\n    @observable password = '';\n    @observable passwordPassed = false;\n\n\n\n    @observable passwordRepeat = '';\n\n\n    @observable startInput = false;\n\n\n    @observable registering = false;\n    @observable isSuccess = false;\n   \n    @computed get validUsername(){\n        //用户名正则，4到16位（字母，数字，下划线，减号）\n    \n        const uPattern = /^[a-zA-Z0-9_-]{4,16}$/;\n        const matchRlt  = uPattern.test(this.username);\n        \n        return matchRlt;\n    }\n    @computed get validPassword(){\n        // 最短6位，最长16位 {6,16}\n        // 可以包含小写大母 [a-z] 和大写字母 [A-Z]\n        // 可以包含数字 [0-9]\n        // 可以包含下划线 [ _ ] 和减号 [ - ]\n        const pPattern = /^[\\w_-]{6,16}$/;\n        return pPattern.test(this.password);\n    }\n\n    @computed get passwordRepeatPassed(){\n        return this.password === this.passwordRepeat;\n    }\n\n    @computed get allPassed(){\n        return this.usernamePassed && this.passwordPassed && this.passwordRepeatPassed;\n    }\n\n    @action reset(){\n        this.validMsg = {\n            username: '',\n            password: '',\n            passwordRepeat: ''\n        };\n        this.passwordRepeat = \"\";\n        this.username = \"\";\n        this.passwordPassed = false;\n        this.registering = false;\n        this.isSuccess = false;\n        this.startInput = false;\n\n    }\n   \n    @action  checkUsernameExist(){\n        this.checkingUsernameExist = true;\n        this.validMsg.username =\"正在检查用户名是否可用\";\n        console.log('走了这检查用户名1');\n        \n        api('users', SHOW_UNIQUE, {key: this.username})\n        .then((rlt:any)=>{\n            if(rlt.status===204){\n                this.usernameExist = false;\n                this.checkingUsernameExist = false;\n            }\n            if(rlt.data.username === this.username){\n                \n                this.usernameExist = true;\n                this.validMsg.username =\"用户名被占用\";\n                this.checkingUsernameExist = false;\n                this.usernamePassed = false;\n\n            }else{\n                this.validMsg.username =\"恭喜用户名可用\";\n                this.usernamePassed = true;\n            }\n            \n        })\n    }\n\n    @action changeUsername(value:any){\n        this.startInput = true;\n        this.username = value;\n       console.log(value);\n       \n        if(!this.validUsername && this.username !== '' ){\n            \n            this.validMsg.username =\"用户名规则，4到16位（字母，数字，下划线，减号）\";\n        }\n        if(this.username !== '' && this.validUsername){\n            \n            this.validMsg.username =\"正在检查用户名是否可用\";\n            this.checkUsernameExist();\n        }\n    }\n   \n\n    @action changePassword(value:any){\n        this.startInput = true;\n        this.password = value;\n\n        if(!this.validPassword && this.password !== '' ){\n            \n            return this.validMsg.password =\"密码６-16位，（字母，数字，下划线，减号）\";\n        }\n        if(this.password === ''){\n            return this.validMsg.password =\"请输入密码\";\n        }\n        \n        this.passwordPassed = true;\n        return this.validMsg.password =\"密码合格通过\";\n\n       \n    }\n    @action changePasswordRepeat(value:any){\n        \n        this.startInput = true;\n        return this.passwordRepeat = value;\n    }\n\n    @action register(){\n        this.registering = true;\n        auth(REGISTER, {\n            username: this.username,\n            password: this.password\n        }).then((rlt:any)=>{\n            if(rlt.data.username === this.username){\n                currentUser.setUsername(rlt.data.username);\n                window.localStorage.setItem('fang_token', rlt.data.token);\n                window.localStorage.setItem('fang_userId', rlt.data.id);\n                this.isSuccess = true;\n            }else{\n                this.isSuccess = false;\n            }\n            \n        })\n    }\n    \n}\n\nconst registerFormStore = new RegisterFormStore();\n\n\nexport default registerFormStore;"]},"metadata":{},"sourceType":"module"}