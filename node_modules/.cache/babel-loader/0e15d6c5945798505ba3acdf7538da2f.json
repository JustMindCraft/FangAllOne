{"ast":null,"code":"import _classCallCheck from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/zhoushixiong/zsx_work/FangAllOne/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _class,\n    _jsxFileName = \"/Users/zhoushixiong/zsx_work/FangAllOne/src/components/withMobx/RegisterFormWithMobx.tsx\";\n\nimport React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport RegisterForm from '../stateless/RegisterForm';\n\nvar RegisterFormWithMobx = observer(_class =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RegisterFormWithMobx, _Component);\n\n  function RegisterFormWithMobx() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RegisterFormWithMobx);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RegisterFormWithMobx)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (e) {\n      e.preventDefault();\n      var store = _this.props.store;\n\n      if (!store.allPassed) {\n        return false;\n      }\n\n      store.register();\n    };\n\n    _this.handleInputChange = function (event, key) {\n      var store = _this.props.store;\n      var value = event.target.value;\n\n      switch (key) {\n        case \"username\":\n          store.changeUsername(value);\n          break;\n\n        case \"password\":\n          store.changePassword(value);\n          break;\n\n        case \"passwordRepeat\":\n          store.changePasswordRepeat(value);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    _this.successRedirect = function (history) {\n      history.push('/dashboard');\n    };\n\n    return _this;\n  }\n\n  _createClass(RegisterFormWithMobx, [{\n    key: \"componentWillReact\",\n    value: function componentWillReact() {\n      var store = this.props.store;\n      this.props.redirectSuccess(store.isSuccess);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var store = this.props.store;\n      store.reset();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var store = this.props.store;\n      return React.createElement(RegisterForm, {\n        onSubmit: this.onSubmit,\n        handleInputChange: this.handleInputChange,\n        msg: store.msg,\n        msgType: store.msgType,\n        startInput: store.startInput,\n        isPassed: store.isPassed,\n        submitBtnHidden: store.submitBtnHidden,\n        registering: store.registering,\n        isSuccess: store.isSuccess,\n        validUsername: store.validUsername,\n        validMsgUsername: store.validMsg.username,\n        validMsgPassword: store.validMsg.password,\n        usernamePassed: store.usernamePassed,\n        passwordPassed: store.passwordPassed,\n        passwordRepeat: store.passwordRepeat,\n        passwordRepeatPassed: store.passwordRepeatPassed,\n        allPassed: store.allPassed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RegisterFormWithMobx;\n}(Component)) || _class;\n\nexport default RegisterFormWithMobx;","map":{"version":3,"sources":["/Users/zhoushixiong/zsx_work/FangAllOne/src/components/withMobx/RegisterFormWithMobx.tsx"],"names":["React","Component","observer","RegisterForm","RegisterFormWithMobx","onSubmit","e","preventDefault","store","props","allPassed","register","handleInputChange","event","key","value","target","changeUsername","changePassword","changePasswordRepeat","successRedirect","history","push","redirectSuccess","isSuccess","reset","msg","msgType","startInput","isPassed","submitBtnHidden","registering","validUsername","validMsg","username","password","usernamePassed","passwordPassed","passwordRepeat","passwordRepeatPassed"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;;IAOMC,oB,GADLF,Q;;;;;;;;;;;;;;;;;;UAYGG,Q,GAAW,UAACC,CAAD,EAAW;AAClBA,MAAAA,CAAC,CAACC,cAAF;AADkB,UAEXC,KAFW,GAEF,MAAKC,KAFH,CAEXD,KAFW;;AAGlB,UAAG,CAACA,KAAK,CAACE,SAAV,EAAoB;AAChB,eAAO,KAAP;AACH;;AACDF,MAAAA,KAAK,CAACG,QAAN;AAEH,K;;UAEDC,iB,GAAoB,UAACC,KAAD,EAAYC,GAAZ,EAA2B;AAAA,UACpCN,KADoC,GAC3B,MAAKC,KADsB,CACpCD,KADoC;AAE3C,UAAMO,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaD,KAA3B;;AACA,cAAQD,GAAR;AACI,aAAK,UAAL;AACIN,UAAAA,KAAK,CAACS,cAAN,CAAqBF,KAArB;AACA;;AACJ,aAAK,UAAL;AACIP,UAAAA,KAAK,CAACU,cAAN,CAAqBH,KAArB;AACA;;AACJ,aAAK,gBAAL;AACIP,UAAAA,KAAK,CAACW,oBAAN,CAA2BJ,KAA3B;AACA;;AACJ;AACI;AAXR;AAcH,K;;UAEDK,e,GAAkB,UAACC,OAAD,EAAiB;AAC/BA,MAAAA,OAAO,CAACC,IAAR,CAAa,YAAb;AACH,K;;;;;;;yCAzCmB;AAAA,UACRd,KADQ,GACE,KAAKC,KADP,CACRD,KADQ;AAEhB,WAAKC,KAAL,CAAWc,eAAX,CAA2Bf,KAAK,CAACgB,SAAjC;AACH;;;wCACkB;AAAA,UACPhB,KADO,GACG,KAAKC,KADR,CACPD,KADO;AAEfA,MAAAA,KAAK,CAACiB,KAAN;AAEH;;;6BAkCO;AAAA,UACGjB,KADH,GACY,KAAKC,KADjB,CACGD,KADH;AAEJ,aAEI,oBAAC,YAAD;AACI,QAAA,QAAQ,EAAE,KAAKH,QADnB;AAEI,QAAA,iBAAiB,EAAE,KAAKO,iBAF5B;AAGI,QAAA,GAAG,EAAEJ,KAAK,CAACkB,GAHf;AAII,QAAA,OAAO,EAAElB,KAAK,CAACmB,OAJnB;AAKI,QAAA,UAAU,EAAEnB,KAAK,CAACoB,UALtB;AAMI,QAAA,QAAQ,EAAEpB,KAAK,CAACqB,QANpB;AAOI,QAAA,eAAe,EAAErB,KAAK,CAACsB,eAP3B;AAQI,QAAA,WAAW,EAAEtB,KAAK,CAACuB,WARvB;AASI,QAAA,SAAS,EAAEvB,KAAK,CAACgB,SATrB;AAUI,QAAA,aAAa,EAAEhB,KAAK,CAACwB,aAVzB;AAWI,QAAA,gBAAgB,EAAExB,KAAK,CAACyB,QAAN,CAAeC,QAXrC;AAYI,QAAA,gBAAgB,EAAE1B,KAAK,CAACyB,QAAN,CAAeE,QAZrC;AAaI,QAAA,cAAc,EAAE3B,KAAK,CAAC4B,cAb1B;AAcI,QAAA,cAAc,EAAE5B,KAAK,CAAC6B,cAd1B;AAeI,QAAA,cAAc,EAAE7B,KAAK,CAAC8B,cAf1B;AAgBI,QAAA,oBAAoB,EAAE9B,KAAK,CAAC+B,oBAhBhC;AAiBI,QAAA,SAAS,EAAE/B,KAAK,CAACE,SAjBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ;AAuBH;;;;EApE8BT,S;;AAwEnC,eAAeG,oBAAf","sourcesContent":["import React, { Component } from 'react';\nimport { observer } from 'mobx-react';\nimport RegisterForm from '../stateless/RegisterForm';\n\ninterface IRegisterFormWithMobx {\n    store: any,\n    redirectSuccess: Function\n}\n@observer\nclass RegisterFormWithMobx extends Component<IRegisterFormWithMobx> {\n    componentWillReact(){\n        const { store } = this.props;\n        this.props.redirectSuccess(store.isSuccess);\n    }\n    componentDidMount(){\n        const { store } = this.props;\n        store.reset();\n        \n    }\n    \n    onSubmit = (e:any) => {\n        e.preventDefault();\n        const {store} = this.props;\n        if(!store.allPassed){\n            return false;\n        }\n        store.register()\n        \n    }\n\n    handleInputChange = (event:any, key:string) => {\n        const {store} = this.props;\n        const value = event.target.value;\n        switch (key) {\n            case \"username\":\n                store.changeUsername(value);\n                break;\n            case \"password\":\n                store.changePassword(value);\n                break;\n            case \"passwordRepeat\":\n                store.changePasswordRepeat(value);\n                break;\n            default:\n                break;\n        }\n        \n    }\n    \n    successRedirect = (history:any) => {\n        history.push('/dashboard')\n    }\n    render(){\n        const {store} = this.props;\n        return (\n          \n            <RegisterForm \n                onSubmit={this.onSubmit} \n                handleInputChange={this.handleInputChange}\n                msg={store.msg}\n                msgType={store.msgType}\n                startInput={store.startInput}\n                isPassed={store.isPassed}\n                submitBtnHidden={store.submitBtnHidden}\n                registering={store.registering}\n                isSuccess={store.isSuccess}\n                validUsername={store.validUsername}\n                validMsgUsername={store.validMsg.username}\n                validMsgPassword={store.validMsg.password}\n                usernamePassed={store.usernamePassed}\n                passwordPassed={store.passwordPassed}\n                passwordRepeat={store.passwordRepeat}\n                passwordRepeatPassed={store.passwordRepeatPassed}\n                allPassed={store.allPassed}\n            />\n                \n        )\n    }\n    \n}\n\nexport default RegisterFormWithMobx"]},"metadata":{},"sourceType":"module"}