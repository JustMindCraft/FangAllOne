"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _cloudinaryCore = _interopRequireWildcard(require("cloudinary-core"));

var _CloudinaryComponent2 = _interopRequireDefault(require("../CloudinaryComponent"));

var _Util = require("../../Util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

/**
 * A component representing a Cloudinary served image
 */
var Image =
/*#__PURE__*/
function (_CloudinaryComponent) {
  _inherits(Image, _CloudinaryComponent);

  function Image(props, context) {
    var _this;

    _classCallCheck(this, Image);

    function defaultBreakpoints(width) {
      var steps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      return steps * Math.ceil(width / steps);
    }

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Image).call(this, props, context));
    _this.handleResize = _this.handleResize.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    var state = {
      responsive: false,
      url: undefined,
      breakpoints: defaultBreakpoints
    };
    _this.state = Object.assign(state, _this.prepareState(props, context));
    return _this;
  }
  /**
   * Retrieve the window or default view of the current element
   * @returns {DocumentView|*}
   * @private
   */


  _createClass(Image, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps, nextContext) {
      var state = this.prepareState(nextProps, nextContext);
      this.setState(state);
    }
    /**
     * Generate update state of this element
     * @param {Object} [props=this.props]
     * @param {Object} [context=this.context]
     * @returns {Object} state updates
     * @private
     */

  }, {
    key: "prepareState",
    value: function prepareState() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.context;

      var extendedProps = _CloudinaryComponent2.default.normalizeOptions(context, props);

      var url = this.getUrl(extendedProps);
      var state = {};

      if (extendedProps.breakpoints !== undefined) {
        state.breakpoints = extendedProps.breakpoints;
      }

      if (extendedProps.responsive) {
        state.responsive = true;
        url = this.cloudinary_update(url, state);
      }

      var currentState = this.state || {};

      if (!_cloudinaryCore.Util.isEmpty(url) && url !== currentState.url) {
        state.url = url;
      }

      return state;
    }
  }, {
    key: "handleResize",
    value: function handleResize(e) {
      var _this2 = this;

      if (this.rqf) return;
      this.rqf = (0, _Util.requestAnimationFrame)(function () {
        _this2.rqf = null;

        var newState = _this2.prepareState();

        if (!_cloudinaryCore.Util.isEmpty(newState.url)) {
          _this2.setState(newState);
        }
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      // now that we have a this.element, we need to calculate the URL
      this.handleResize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.element = undefined;

      if (this.listener) {
        this.listener.cancel();
        this.window && this.window.removeEventListener('resize', this.listener);
      }

      this.listener = undefined;
    }
  }, {
    key: "componentWillUpdate",
    value: function componentWillUpdate(nextProps, nextState, nextContext) {
      if (nextState.responsive) {
        var wait = (0, _Util.firstDefined)(nextProps.responsiveDebounce, nextContext.responsiveDebounce, 100);

        if (this.listener) {
          this.window && this.window.removeEventListener('resize', this.listener);
        }

        this.listener = (0, _Util.debounce)(this.handleResize, wait);
        this.window && this.window.addEventListener('resize', this.listener);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _CloudinaryComponent$ = _CloudinaryComponent2.default.normalizeOptions(this.props, this.context),
          publicId = _CloudinaryComponent$.publicId,
          responsive = _CloudinaryComponent$.responsive,
          responsiveDebounce = _CloudinaryComponent$.responsiveDebounce,
          children = _CloudinaryComponent$.children,
          options = _objectWithoutProperties(_CloudinaryComponent$, ["publicId", "responsive", "responsiveDebounce", "children"]);

      var attributes = _cloudinaryCore.default.Transformation.new(options).toHtmlAttributes();

      return _react.default.createElement("img", _extends({}, attributes, {
        src: this.state.url,
        ref: function ref(e) {
          _this3.element = e;
        }
      }));
    } // Methods from cloudinary_js

  }, {
    key: "findContainerWidth",
    value: function findContainerWidth() {
      var containerWidth, style;
      containerWidth = 0;
      var element = this.element;

      while ((0, _Util.isElement)(element = element != null ? element.parentNode : void 0) && !containerWidth) {
        style = this.window ? this.window.getComputedStyle(element) : '';

        if (!/^inline/.test(style.display)) {
          containerWidth = _cloudinaryCore.Util.width(element);
        }
      }

      return containerWidth;
    }
  }, {
    key: "applyBreakpoints",
    value: function applyBreakpoints(width, steps, options) {
      var responsive_use_breakpoints;
      options = _CloudinaryComponent2.default.normalizeOptions(this.context, this.props, options);
      responsive_use_breakpoints = options.responsive_use_breakpoints;

      if (!responsive_use_breakpoints || responsive_use_breakpoints === 'resize' && !options.resizing) {
        return width;
      } else {
        return this.calc_breakpoint(width, steps);
      }
    }
  }, {
    key: "calc_breakpoint",
    value: function calc_breakpoint(width, steps) {
      var breakpoints, point;
      breakpoints = this.state.breakpoints || defaultBreakpoints;

      if (_cloudinaryCore.Util.isFunction(breakpoints)) {
        return breakpoints(width, steps);
      } else {
        if (_cloudinaryCore.Util.isString(breakpoints)) {
          breakpoints = function () {
            var j, len, ref, results;
            ref = breakpoints.split(',');
            results = [];

            for (j = 0, len = ref.length; j < len; j++) {
              point = ref[j];
              results.push(parseInt(point));
            }

            return results;
          }().sort(function (a, b) {
            return a - b;
          });
        }

        return (0, _Util.closestAbove)(breakpoints, width);
      }
    }
  }, {
    key: "device_pixel_ratio",
    value: function device_pixel_ratio() {
      var roundDpr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var dpr, dprString;
      dpr = (typeof this.window !== "undefined" && this.window !== null ? this.window.devicePixelRatio : void 0) || 1;

      if (roundDpr) {
        dpr = Math.ceil(dpr);
      }

      if (dpr <= 0 || isNaN(dpr)) {
        dpr = 1;
      }

      dprString = dpr.toString();

      if (dprString.match(/^\d+$/)) {
        dprString += '.0';
      }

      return dprString;
    }
  }, {
    key: "updateDpr",
    value: function updateDpr(dataSrc, roundDpr) {
      return dataSrc.replace(/\bdpr_(1\.0|auto)\b/g, 'dpr_' + this.device_pixel_ratio(roundDpr));
    }
  }, {
    key: "maxWidth",
    value: function maxWidth(requiredWidth) {
      var imageWidth;
      imageWidth = this.state.width || 0;

      if (requiredWidth > imageWidth) {
        imageWidth = requiredWidth;
        this.setState({
          width: requiredWidth
        });
      }

      return imageWidth;
    }
  }, {
    key: "cloudinary_update",
    value: function cloudinary_update(url) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var requiredWidth;
      var match;
      var resultUrl = this.updateDpr(url, options.roundDpr);

      if (options.responsive || this.state && this.state.responsive) {
        var containerWidth = this.findContainerWidth();

        if (containerWidth !== 0) {
          if (/w_auto:breakpoints/.test(resultUrl)) {
            requiredWidth = this.maxWidth(containerWidth, this.element);
            resultUrl = resultUrl.replace(/w_auto:breakpoints([_0-9]*)(:[0-9]+)?/, "w_auto:breakpoints$1:" + requiredWidth);
          } else if (match = /w_auto(:(\d+))?/.exec(resultUrl)) {
            requiredWidth = this.applyBreakpoints(containerWidth, match[2], options);
            requiredWidth = this.maxWidth(requiredWidth, this.element);
            resultUrl = resultUrl.replace(/w_auto[^,\/]*/g, "w_" + requiredWidth);
          }
        } else {
          resultUrl = "";
        }
      }

      return resultUrl;
    }
  }, {
    key: "window",
    get: function get() {
      var windowRef = null;

      if (typeof window !== "undefined") {
        windowRef = window;
      }

      return this.element && this.element.ownerDocument ? this.element.ownerDocument.defaultView || windowRef : windowRef;
    }
  }]);

  return Image;
}(_CloudinaryComponent2.default);

Image.defaultProps = {};
Image.contextTypes = _CloudinaryComponent2.default.contextTypes;
Image.propTypes = _CloudinaryComponent2.default.propTypes;
var _default = Image;
exports.default = _default;