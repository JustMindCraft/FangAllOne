"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _cloudinaryCore = require("cloudinary-core");

var _CloudinaryComponent2 = _interopRequireDefault(require("../CloudinaryComponent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DEFAULT_POSTER_OPTIONS = {
  format: 'jpg',
  resource_type: 'video'
};
/**
 * A component representing a Cloudinary served video
 */

var Video =
/*#__PURE__*/
function (_CloudinaryComponent) {
  _inherits(Video, _CloudinaryComponent);

  function Video(props) {
    var _this;

    _classCallCheck(this, Video);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Video).call(this, props));
    _this.state = {};
    return _this;
  }

  _createClass(Video, [{
    key: "render",
    value: function render() {
      var _Object$assign = Object.assign({}, this.context, this.props),
          publicId = _Object$assign.publicId,
          poster = _Object$assign.poster,
          sourceTypes = _Object$assign.sourceTypes,
          fallback = _Object$assign.fallback,
          sourceTransformations = _Object$assign.sourceTransformation,
          options = _objectWithoutProperties(_Object$assign, ["publicId", "poster", "sourceTypes", "fallback", "sourceTransformation"]);

      sourceTransformations = sourceTransformations || {};
      sourceTypes = sourceTypes || _cloudinaryCore.Cloudinary.DEFAULT_VIDEO_PARAMS.source_types;
      options = _CloudinaryComponent2.default.normalizeOptions(options, {});

      var cld = _cloudinaryCore.Cloudinary.new(_cloudinaryCore.Util.withSnakeCaseKeys(options));

      var sources = [];

      var tagAttributes = _cloudinaryCore.Transformation.new(options).toHtmlAttributes();

      var childTransformations = this.getTransformation(options);

      if (_cloudinaryCore.Util.isPlainObject(poster)) {
        var defaults = poster.publicId !== undefined && poster.publicId !== null ? _cloudinaryCore.Cloudinary.DEFAULT_IMAGE_PARAMS : DEFAULT_POSTER_OPTIONS;
        poster = cld.url(poster.publicId || publicId, _cloudinaryCore.Util.defaults({}, _cloudinaryCore.Util.withSnakeCaseKeys(poster), defaults));
      }

      if (!_cloudinaryCore.Util.isEmpty(poster)) {
        tagAttributes.poster = poster;
      }

      if (!_cloudinaryCore.Util.isEmpty(this.state.poster)) {
        tagAttributes.poster = this.state.poster;
      }

      if (_cloudinaryCore.Util.isArray(sourceTypes)) {
        sources = sourceTypes.map(function (srcType) {
          var sourceTransformation = sourceTransformations[srcType] || {};
          var src = cld.url(publicId, _cloudinaryCore.Util.defaults({}, sourceTransformation, childTransformations, {
            resource_type: 'video',
            format: srcType
          }));
          var mimeType = 'video/' + (srcType === 'ogv' ? 'ogg' : srcType);
          return _react.default.createElement("source", {
            key: mimeType,
            src: src,
            type: mimeType
          });
        });
      } else {
        var sourceTransformation = sourceTransformations[sourceTypes] || {};
        tagAttributes.src = cld.url(publicId, _cloudinaryCore.Util.defaults({}, sourceTransformation, childTransformations, {
          resource_type: 'video',
          format: sourceTypes
        }));
      }

      return _react.default.createElement("video", tagAttributes, sources, fallback, this.props.children);
    }
  }]);

  return Video;
}(_CloudinaryComponent2.default);

Video.propTypes = {
  publicId: _propTypes.default.string
};
Video.defaultProps = {};
Video.contextTypes = _CloudinaryComponent2.default.contextTypes;
var _default = Video;
exports.default = _default;