export declare type CancellablePromise<T> = Promise<T> & {
    cancel(): void;
};
export interface FlowIterator<T> {
    next(value?: any): IteratorResult<T> | Promise<IteratorResult<T>>;
    return?(value?: any): IteratorResult<T> | Promise<IteratorResult<T>>;
    throw?(e?: any): IteratorResult<T> | Promise<IteratorResult<T>>;
}
export declare function flow<T, U extends any[]>(generator: (...args: U) => FlowIterator<any>): (...args: U) => CancellablePromise<T>;
